package pers.louisj.Zwm.Bar;


import io.qt.core.*;
import io.qt.gui.*;
import io.qt.widgets.*;
import io.qt.core.Qt.AlignmentFlag;

/**
 * @author Greg Hart
 */
public class CalculatorExample {
    static {
        QtStaticSetting.Init();
    }

    public static void main0(String[] args) {
        QApplication app = QApplication.initialize(QtStaticSetting.PluginArg());
        Calculator calc = new Calculator();
        calc.show();
        System.exit(QApplication.exec());
    }

    public static void main(String[] args) {
        QApplication.initialize(QtStaticSetting.PluginArg());
        Calculator calc = new Calculator();
        calc.show();
        int status = QApplication.exec();
        QApplication.shutdown();
        System.exit(status);
    }

    public static class Button extends QToolButton {

        public Button(String text) {
            this(text, null);
        }

        public Button(String text, QWidget parent) {
            super(parent);

            setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Preferred);
            setText(text);
        }

        @Override
        public QSize sizeHint() {
            QSize size = super.sizeHint();
            size.setWidth(Math.max(size.width(), size.height()));
            size.setHeight(size.height() + 20);
            return size;
        }
    }

    public static class Calculator extends QWidget {

        private static final int NumDigitButtons = 10;
        private double sumInMemory;
        private double sumSoFar;
        private double factorSoFar;
        private String pendingAdditiveOperator = "";
        private String pendingMultiplicativeOperator = "";
        private boolean waitingForOperand;
        private final QLineEdit display;

        public Calculator() {
            sumInMemory = 0.0;
            sumSoFar = 0.0;
            factorSoFar = 0.0;
            waitingForOperand = true;

            display = new QLineEdit("0");
            display.setReadOnly(true);
            display.setAlignment(AlignmentFlag.AlignRight);
            display.setMaxLength(15);

            QFont font = display.font();
            font.setPointSize(font.pointSize() + 8);
            display.setFont(font);

            Button[] digitButtons = new Button[NumDigitButtons];
            for (int i = 0; i < NumDigitButtons; ++i) {
                int newi = i;
                digitButtons[i] = new Button(String.valueOf(i));
                digitButtons[i].clicked.connect((checked) -> digitClicked(newi));
            }

            Button pointButton = new Button(tr("."));
            pointButton.clicked.connect((checked) -> pointClicked());

            Button changeSignButton = new Button(tr("\u00b1"));
            changeSignButton.clicked.connect((checked) -> changeSignClicked());

            Button backspaceButton = new Button(tr("Backspace"));
            backspaceButton.clicked.connect((checked) -> backspaceClicked());

            Button clearButton = new Button(tr("Clear"));
            clearButton.clicked.connect((checked) -> clear());

            Button clearAllButton = new Button(tr("Clear All"));
            clearAllButton.clicked.connect((checked) -> clearAll());

            Button clearMemoryButton = new Button(tr("MC"));
            clearMemoryButton.clicked.connect((checked) -> clearMemory());

            Button readMemoryButton = new Button(tr("MR"));
            readMemoryButton.clicked.connect((checked) -> readMemory());

            Button setMemoryButton = new Button(tr("MS"));
            setMemoryButton.clicked.connect((checked) -> setMemory());

            Button addToMemoryButton = new Button(tr("M+"));
            addToMemoryButton.clicked.connect((checked) -> addToMemory());

            Button divisionButton = new Button(tr("\u00f7"));
            divisionButton.clicked.connect((checked) -> multiplicativeOperatorClicked(tr("\u00f7")));

            Button timesButton = new Button(tr("\u00d7"));
            timesButton.clicked.connect((checked) -> multiplicativeOperatorClicked(tr("\u00d7")));

            Button minusButton = new Button(tr("-"));
            minusButton.clicked.connect((checked) -> additiveOperatorClicked(tr("-")));

            Button plusButton = new Button(tr("+"));
            plusButton.clicked.connect((checked) -> additiveOperatorClicked(tr("+")));

            Button squareRootButton = new Button(tr("Sqrt"));
            squareRootButton.clicked.connect((checked) -> unaryOperatorClicked(tr("Sqrt")));

            Button powerButton = new Button(tr("x\u00b2"));
            powerButton.clicked.connect((checked) -> unaryOperatorClicked(tr("x\u00b2")));

            Button reciprocalButton = new Button(tr("1/x"));
            reciprocalButton.clicked.connect((checked) -> unaryOperatorClicked(tr("1/x")));

            Button equalButton = new Button(tr("="));
            equalButton.clicked.connect((checked) -> equalClicked());

            QGridLayout mainLayout = new QGridLayout();
            // mainLayout.setSizeConstraint(QLayout.SizeConstraint.SetFixedSize);
            mainLayout.addWidget(display, 0, 0, 1, 6);
            mainLayout.addWidget(backspaceButton, 1, 0, 1, 2);
            mainLayout.addWidget(clearButton, 1, 2, 1, 2);
            mainLayout.addWidget(clearAllButton, 1, 4, 1, 2);

            mainLayout.addWidget(clearMemoryButton, 2, 0);
            mainLayout.addWidget(readMemoryButton, 3, 0);
            mainLayout.addWidget(setMemoryButton, 4, 0);
            mainLayout.addWidget(addToMemoryButton, 5, 0);

            for (int i = 1; i < NumDigitButtons; ++i) {
                int row = ((9 - i) / 3) + 2;
                int column = ((i - 1) % 3) + 1;
                mainLayout.addWidget(digitButtons[i], row, column);
            }

            mainLayout.addWidget(digitButtons[0], 5, 1);
            mainLayout.addWidget(pointButton, 5, 2);
            mainLayout.addWidget(changeSignButton, 5, 3);

            mainLayout.addWidget(divisionButton, 2, 4);
            mainLayout.addWidget(timesButton, 3, 4);
            mainLayout.addWidget(minusButton, 4, 4);
            mainLayout.addWidget(plusButton, 5, 4);

            mainLayout.addWidget(squareRootButton, 2, 5);
            mainLayout.addWidget(powerButton, 3, 5);
            mainLayout.addWidget(reciprocalButton, 4, 5);
            mainLayout.addWidget(equalButton, 5, 5);
            setLayout(mainLayout);

            setWindowTitle(tr("Calculator"));
        }

        private void digitClicked(int i) {
            if (display.text().equals("0") && i == 0)
                return;

            if (waitingForOperand) {
                display.clear();
                waitingForOperand = false;
            }
            display.setText(display.text() + i);
        }

        private void unaryOperatorClicked(String clickedOperator) {
            double operand = Double.parseDouble(display.text());
            double result = 0.0;

            if (clickedOperator.equals(tr("Sqrt"))) {
                if (operand < 0.0) {
                    abortOperation();
                    return;
                }
                result = Math.sqrt(operand);
            } else if (clickedOperator.equals(tr("x\u00b2"))) {
                result = Math.pow(operand, 2.0);
            } else if (clickedOperator.equals(tr("1/x"))) {
                if (operand == 0.0) {
                    abortOperation();
                    return;
                }
                result = 1.0 / operand;
            }
            display.setText(String.valueOf(result));
            waitingForOperand = true;
        }

        private void additiveOperatorClicked(String clickedOperator) {
            double operand = Double.parseDouble(display.text());

            if (!pendingMultiplicativeOperator.isEmpty()) {
                if (!calculate(operand, pendingMultiplicativeOperator)) {
                    abortOperation();
                    return;
                }
                display.setText(String.valueOf(factorSoFar));
                operand = factorSoFar;
                factorSoFar = 0.0;
                pendingMultiplicativeOperator = "";
            }

            if (!pendingAdditiveOperator.isEmpty()) {
                if (!calculate(operand, pendingAdditiveOperator)) {
                    abortOperation();
                    return;
                }
                display.setText(String.valueOf(sumSoFar));
            } else {
                sumSoFar = operand;
            }

            pendingAdditiveOperator = clickedOperator;
            waitingForOperand = true;
        }

        private void multiplicativeOperatorClicked(String clickedOperator) {
            double operand = Double.parseDouble(display.text());

            if (!pendingMultiplicativeOperator.isEmpty()) {
                if (!calculate(operand, pendingMultiplicativeOperator)) {
                    abortOperation();
                    return;
                }
                display.setText(String.valueOf(factorSoFar));
            } else {
                factorSoFar = operand;
            }

            pendingMultiplicativeOperator = clickedOperator;
            waitingForOperand = true;
        }

        private void equalClicked() {
            double operand = Double.parseDouble(display.text());

            if (!pendingMultiplicativeOperator.isEmpty()) {
                if (!calculate(operand, pendingMultiplicativeOperator)) {
                    abortOperation();
                    return;
                }
                operand = factorSoFar;
                factorSoFar = 0.0;
                pendingMultiplicativeOperator = "";
            }
            if (!pendingAdditiveOperator.isEmpty()) {
                if (!calculate(operand, pendingAdditiveOperator)) {
                    abortOperation();
                    return;
                }
                pendingAdditiveOperator = "";
            } else {
                sumSoFar = operand;
            }

            display.setText(String.valueOf(sumSoFar));
            sumSoFar = 0.0;
            waitingForOperand = true;
        }

        private void pointClicked() {
            if (waitingForOperand)
                display.setText("0");
            if (!display.text().contains("."))
                display.setText(display.text() + tr("."));
            waitingForOperand = false;
        }

        private void changeSignClicked() {
            String text = display.text();
            double value = Double.parseDouble(text);

            if (value > 0.0) {
                text = tr("-") + text;
            } else if (value < 0.0) {
                text = text.substring(1);
            }
            display.setText(text);
        }

        private void backspaceClicked() {
            if (waitingForOperand)
                return;

            String text = display.text();
            text = text.substring(0, text.length() - 1);
            if (text.isEmpty()) {
                text = ("0");
                waitingForOperand = true;
            }
            display.setText(text);
        }

        private void clear() {
            if (waitingForOperand)
                return;

            display.setText("0");
            waitingForOperand = true;
        }

        private void clearAll() {
            sumSoFar = 0.0;
            factorSoFar = 0.0;
            pendingAdditiveOperator = "";
            pendingMultiplicativeOperator = "";
            display.setText("0");
            waitingForOperand = true;
        }

        private void clearMemory() {
            sumInMemory = 0.0;
        }

        private void readMemory() {
            display.setText(String.valueOf(sumInMemory));
            waitingForOperand = true;
        }

        private void setMemory() {
            equalClicked();
            sumInMemory = Double.parseDouble(display.text());
        }

        private void addToMemory() {
            equalClicked();
            sumInMemory += Double.parseDouble(display.text());
        }

        private void abortOperation() {
            clearAll();
            display.setText(tr("####"));
        }

        private boolean calculate(double rightOperand, String pendingOperator) {
            if (pendingOperator.equals(tr("+"))) {
                sumSoFar += rightOperand;
            } else if (pendingOperator.equals(tr("-"))) {
                sumSoFar -= rightOperand;
            } else if (pendingOperator.equals(tr("\u00d7"))) {
                factorSoFar *= rightOperand;
            } else if (pendingOperator.equals(tr("\u00f7"))) {
                if (rightOperand == 0.0)
                    return false;
                factorSoFar /= rightOperand;
            }
            return true;
        }
    }
}